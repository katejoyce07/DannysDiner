//Question 1
SELECT 
    CUSTOMER_ID,
    sum(PRICE)
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M 
    ON S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY CUSTOMER_ID;

SELECT *
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S



//Question 2
SELECT 
    count(ORDER_DATE) AS TOTAL_DAYS,
    CUSTOMER_ID
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES
GROUP BY CUSTOMER_ID;

// QUESTION 3
SELECT 
    CUSTOMER_ID,
    min(ORDER_DATE) AS FIRST_ORDER,
    min(PRODUCT_NAME) AS FIRST_ITEM
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M
    ON M.PRODUCT_ID=S.PRODUCT_ID
GROUP BY 
    CUSTOMER_ID
ORDER BY CUSTOMER_ID;

//QUESTION 4
SELECT 
    PRODUCT_NAME,
    count(PRODUCT_NAME) AS TOTAL_ORDERED
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M
    ON S.PRODUCT_ID=M.PRODUCT_ID
WHERE PRODUCT_NAME = 'ramen'
GROUP BY PRODUCT_NAME;

//QUESTION 5
SELECT 
     CUSTOMER_ID,
    PRODUCT_NAME,
    COUNT( PRODUCT_NAME) AS TOTAL_ORDERED
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M
    ON S.PRODUCT_ID=M.PRODUCT_ID
    GROUP BY
    CUSTOMER_ID,
    PRODUCT_NAME
ORDER BY TOTAL_ORDERED DESC
LIMIT 3;

//QUESTION 6
SELECT 
    PRODUCT_NAME,
    ORDER_DATE,
    S.CUSTOMER_ID
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS ME
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
    ON ME.CUSTOMER_ID=S.CUSTOMER_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M
    ON M.PRODUCT_ID=S.PRODUCT_ID
WHERE JOIN_DATE <= ORDER_DATE
GROUP BY
    PRODUCT_NAME,
    S.CUSTOMER_ID,
    ORDER_DATE
ORDER BY ORDER_DATE;


//nicks way
SELECT  distinct
    s.customer_id,
    product_name as first_order_as_member
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES as s
    JOIN (select
            s.customer_id,
            min(order_date) as first_order
          from TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES as s
          join TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS as m
              on s.customer_id = m.customer_id
          where s.order_date >= join_date
          group by s.customer_id
         ) as j
        on order_date = first_order AND s.customer_id = j.customer_id
    JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU as m
        on s.product_id = m.product_iD;

//QUESTION 7
SELECT 
    PRODUCT_NAME,
    ORDER_DATE,
    S.CUSTOMER_ID,
   ME.JOIN_DATE
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS ME
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
    ON ME.CUSTOMER_ID=S.CUSTOMER_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M
    ON M.PRODUCT_ID=S.PRODUCT_ID
WHERE JOIN_DATE> ORDER_DATE
GROUP BY
    PRODUCT_NAME,
    S.CUSTOMER_ID,
    ORDER_DATE,
    ME.JOIN_DATE
ORDER BY ORDER_DATE;

//jACKS VERSION
SELECT CUSTOMER,
MAX(ORDER_DATE),
PRODUCT_NAME,
MIN(ORDERS) AS RANKING
FROM(SELECT 
s.CUSTOMER_ID AS CUSTOMER,
ORDER_DATE,
PRODUCT_NAME,
RANK() OVER (PARTITION BY S.CUSTOMER_ID ORDER BY ORDER_DATE DESC) AS ORDERS
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS MEN
ON S.PRODUCT_ID=MEN.PRODUCT_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS MEMB
ON S.CUSTOMER_ID=MEMB.CUSTOMER_ID
WHERE JOIN_DATE>ORDER_DATE)
GROUP BY CUSTOMER, PRODUCT_NAME
HAVING RANKING = 1;

//question 8
SELECT 
    S.CUSTOMER_ID,
    sum(PRICE) AS TOTAL_SPENT,
    COUNT(PRODUCT_NAME) AS TOTAL_PRODUCTS
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M 
    ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS ME
ON ME.CUSTOMER_ID=S.CUSTOMER_ID
    WHERE ORDER_DATE <JOIN_DATE
GROUP BY S.CUSTOMER_ID;


// QUESTION 9
SELECT 
    S.CUSTOMER_ID,
SUM(CASE 
WHEN S.PRODUCT_ID=1 THEN price*20
ELSE PRICE*10
END) AS TOTAL_PRICE
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS M 
    ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS ME
ON ME.CUSTOMER_ID=S.CUSTOMER_ID
    WHERE ORDER_DATE >=JOIN_DATE
    GROUP BY S.CUSTOMER_ID;

//QUESTION 10
SELECT  
    S.customer_id, 
  SUM(CASE 
      WHEN S.order_date BETWEEN MEM.join_date AND DATEADD('day', 6, MEM.join_date) THEN price * 10 * 2 
      WHEN product_name = 'sushi' THEN price * 10 * 2 
      ELSE price * 10 
    END) as TOTAL_OVERALL_POINTS 
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU as M 
  INNER JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES as S ON S.product_id = M.product_id
  INNER JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS MEM ON MEM.customer_id = S.customer_id 
WHERE DATE_TRUNC('month', S.order_date) = '2021-01-01' 
GROUP BY 
  S.customer_id;

//BONUS QUESTION
SELECT *
FROM TIL_PLAYGROUND.CS1_DANNYS_DINER.SALES AS S
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MENU AS ME
    ON S.PRODUCT_ID=ME.PRODUCT_ID
JOIN TIL_PLAYGROUND.CS1_DANNYS_DINER.MEMBERS AS M
ON M.CUSTOMER_ID=S.CUSTOMER_ID;